def str_compare(A, B):  # Старый код
    ngrams = [A[i:i + 3] for i in range(len(A))]
    count = 0
    for ngram in ngrams:
        count += B.count(ngram)

    return count


stroki = [("меч", "печь"), ("птица", "ученица"), ("университет", "специалитет"), ("exception", "interception")]

if __name__ == "__main__":
    for s, t in stroki:
        print(s, t, str_compare(s, t))


# Проведенная ревизия кода на соответствие PEP8:

def str_compare(first, second):  # имена аргументов функции заменены на имена, начинающиеся со строчной буквы,
    # и длиной более одного символа.
    ngrams = [first[i:i + 3] for i in range(len(first))]  # добавлены пробелы вокруг оператора "+"
    count = 0
    for ngram in ngrams:
        count += second.count(ngram)

    return count  # структурная единица кода отделена от последующей единицы двумя пустыми строками вместо одной


stroki = [("меч", "печь"), ("птица", "ученица"),  # значения выровнены по открывающемуся разделителю
          ("университет", "специалитет"), ("exception", "interception")]

if __name__ == "__main__":
    for word_1, word_2 in stroki:  # имена элементов в цикле заменены на имена длиной более одного символа
        print(word_1, word_2, str_compare(word_1, word_2))

# Вывод. Добавление пустых строк улучшило читаемость кода.
# Выравнивание значений по открывающемуся разделителю также улучшило читаемость кода.
# На мой взгляд, добавление пробелов вокруг оператора "+" в данном случае особой разницы не принесло.
# Замена имен аргументов функции, элементов в цикле, увеличение их длины позволяет быстрее отыскать их в коде,
# улучшает восприятие кода.
